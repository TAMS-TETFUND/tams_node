# Generated by Django 4.0.3 on 2022-04-16 08:26

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.db.models.functions.text
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('other_names', models.CharField(blank=True, max_length=255, null=True)),
                ('fingerprint_template', models.CharField(blank=True, max_length=3000, null=True)),
                ('face_encodings', models.CharField(blank=True, max_length=3000, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AcademicSession',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('session', models.CharField(max_length=10, unique=True)),
                ('is_current_session', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='AttendanceRecord',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('record_type', models.IntegerField(verbose_name=[(1, 'Sign In'), (2, 'Sign Out')])),
                ('logged_by', models.DateTimeField(auto_now_add=True)),
                ('is_valid', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='AttendanceSession',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('event_type', models.IntegerField(verbose_name=[(1, 'Lecture'), (2, 'Lab'), (3, 'Test'), (4, 'Exam')])),
                ('start_time', models.DateTimeField(default=datetime.datetime(2022, 4, 16, 8, 26, 20, 127847))),
                ('duration', models.DurationField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('recurring', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=8)),
                ('title', models.CharField(max_length=255)),
                ('level_of_study', models.IntegerField()),
                ('unit_load', models.IntegerField()),
                ('semester', models.IntegerField(choices=[(1, 'First Semester'), (2, 'Second Semester')])),
                ('elective', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='CourseRegistration',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('semester', models.IntegerField(verbose_name=[(1, 'First Semester'), (2, 'Second Semester')])),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=500)),
                ('alias', models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='StaffTitle',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title_full', models.CharField(max_length=50)),
                ('title', models.CharField(max_length=25)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='AppAdmin',
            fields=[
                ('appuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('clearance_number', models.IntegerField(default=1)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('db.appuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('appuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('staff_number', models.CharField(max_length=25, unique=True)),
                ('is_exam_officer', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('db.appuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('reg_number', models.CharField(max_length=12, unique=True)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('other_names', models.CharField(blank=True, max_length=255, null=True)),
                ('possible_grad_yr', models.IntegerField()),
                ('admission_status', models.IntegerField(choices=[(1, 'Regular'), (2, 'Graduated'), (3, 'External'), (4, 'Overstay'), (5, 'Withdrawn'), (6, 'Suspended')], default=1)),
                ('level_of_study', models.IntegerField(blank=True, null=True)),
                ('fingerprint_template', models.CharField(blank=True, max_length=512, null=True)),
                ('face_encodings', models.CharField(blank=True, max_length=3000, null=True)),
                ('sex', models.IntegerField(choices=[(1, 'Male'), (2, 'Female')])),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.department')),
            ],
        ),
        migrations.AddConstraint(
            model_name='stafftitle',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Upper(django.db.models.functions.text.Replace('title', django.db.models.expressions.Value('.'), django.db.models.expressions.Value(''))), name='unique_title'),
        ),
        migrations.AddConstraint(
            model_name='faculty',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Upper('name'), name='unique_faculty_name'),
        ),
        migrations.AddField(
            model_name='department',
            name='faculty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.faculty'),
        ),
        migrations.AddField(
            model_name='courseregistration',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.course'),
        ),
        migrations.AddField(
            model_name='courseregistration',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.academicsession'),
        ),
        migrations.AddField(
            model_name='courseregistration',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.student'),
        ),
        migrations.AddField(
            model_name='course',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.department'),
        ),
        migrations.AddField(
            model_name='attendancesession',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.course'),
        ),
        migrations.AddField(
            model_name='attendancesession',
            name='initiator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='attendancesession',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.academicsession'),
        ),
        migrations.AddField(
            model_name='attendancerecord',
            name='attendance_session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.attendancesession'),
        ),
        migrations.AddField(
            model_name='attendancerecord',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.student'),
        ),
        migrations.AddField(
            model_name='appuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='appuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='staff',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.department'),
        ),
        migrations.AddField(
            model_name='staff',
            name='staff_titles',
            field=models.ManyToManyField(to='db.stafftitle'),
        ),
        migrations.AddConstraint(
            model_name='department',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Upper('name'), name='unique_department_name'),
        ),
        migrations.AddConstraint(
            model_name='department',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Upper('alias'), name='unique_department_short_name'),
        ),
        migrations.AddConstraint(
            model_name='courseregistration',
            constraint=models.UniqueConstraint(fields=('student', 'course', 'session'), name='unique_course_registration'),
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.UniqueConstraint(fields=('code', 'title', 'unit_load'), name='unique_course_details'),
        ),
        migrations.AddConstraint(
            model_name='attendancesession',
            constraint=models.UniqueConstraint(fields=('course', 'session', 'start_time', 'duration'), name='unique_attendance_session'),
        ),
        migrations.AddConstraint(
            model_name='attendancesession',
            constraint=models.CheckConstraint(check=models.Q(('start_time__lt', django.db.models.expressions.CombinedExpression(django.db.models.expressions.F('start_time'), '+', django.db.models.expressions.F('duration')))), name='check_valid_stop_time'),
        ),
        migrations.AddConstraint(
            model_name='attendancerecord',
            constraint=models.UniqueConstraint(fields=('attendance_session', 'student', 'record_type'), name='unique_attendance_record'),
        ),
    ]
