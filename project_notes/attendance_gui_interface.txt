================Details of the Attendance GUI Interface========================
===========================Home================================================
    1.  Take Attendance
    2.  Continue a previous attendance-taking session


===========================Take Attendance=====================================
    1.  Lecture
    2.  Exam
    3.  Continuous Assessment
    4.  Lab

===========================Lecture=============================================
    +   initiator - begin by verifying the identity of the attendance session initiator
    +   Faculty -  What faculty is the course under?
    +   Department
    +   Course
    ****is it really necessary in all scenarios that a staff has to start 
        an attendance-taking session?
    +   Start time - should not be earlier than the current date
    +   Duration (added to start time to get stop time)
    +   session
    +   Preferred Biometric mode (Fingerprint/Face) - Might be a system setting

===========================Attendance Session====================================
    +   Poll for QR code - (Prompt student to present QR code on class admit card/ID card)
    
    ===On successful read
        ====On successful student record retrieval
            + Poll for biometric info of student
            ====On successful verification save attendance record for student
            - Return to Poll for QR code
            - Increment count of student attendance marked for the current attendance session 
                (which is displayed on the attendance session window)

            ===On unsuccessful verification, if only one biometric verification mode is available, 
                prompt user to re-try
                - If successful follow Procedure described above
                -else inform the user he was unsessful the second time
                **The user should not be allowed to re-enter the same registration number at the 
                    "Poll for QR Code" stage**

    ====If read not successful
        ===Prompt student to use the onscreen keyboard for manual entry
            - Follow Procedure described above for handling the user's interaction with the 
                system from this point

===============================Exam=====================================================
For a Faculty course, a staff of a different Department might initiate the attendance-taking session
for the examination. In fact, the assumption that a staff of a different department cannot start A
session for a course from a different department is wrong.
================================Useability==================================================
    +   there should be a 'Scheduled Events' feature where scheduled events and recurring events will
        be listed (sorted according to the days of the week)
    +   Only a lecture/Lab event can be a recurring event.
    +   Any one can schedule an event but only a duly registered staff can activate/initialize it.
    +   Can more than one staff access the same scheduled event? Once a staff initializes a scheduled event
        should he/she be the only person allowed to reactivate/continue the session in the event of a disruption
        in the attendance-taking session? - Yes
==================================Suggestions============================================
system will be more useable if user could set a particular event as recurring (weekly)
a button for starting a scheduled event on the homepage

=======================================implementation=================================
For the sake of maintainability, GUI solution should be class-based. 

Every window will be a class
Every window could be based on a base class where general functionalities like input validation would be 
    implemented
There could be a GUI class where the main loop of the program resides or the main loop could
    be just a function.

==================================input validation====================================
How should input validation be handled in the application?
    -registration number and staff numbers already have some validation logic in the staff and student class
    -literature suggests that validation of data should be performed once and only once.
    -literature also suggest that validation should be done when data is no longer subject to mutation prior to
        where it'll be used.

==============================camera=================================================
the camera class will serve the face recognition functionality of the system as well as the barcode scanning
feature of the system.
In the face recongition feature, it will produce np arrays of the images captured after some basic validation logic has been applied
    to it.
For the barcode feature, it will only capture an image when a valid QR code (preferred barcode standard for the system)
is detected. It will then return the decoded QR code.

============================================questions================================
should the loop method be a class method in the gui window classes/subclasses

=========================================todos=======================================
-input validation
-implementation of enrolment feature for testing
-implementation of the attendance marking feature (student verification)
    ==fingerprint and facial recognition
-implementation of the staff verfication feature (attendance session initiation)
-implementation of the qr code scanning feature (staff/student id decoding during verificaton processes)
-implementaton of th qr code generation feature (server feature/ feature for systems primarily responsible
    for registration of staff/students on the system)
-refactor staffenrolment process
-notify user of enrolment success - staff/student enrolment success window?
-refactor attendance session initiation/marking process
-finish the connection to the models and make sure they are seemless
-class-level implementation of the popup_auto_close to reduce code
-enable tapping on the image to trigger capture in camera window
-make face camera window more smoother by making the face_recognition more efficient; add progress bars too
-ensure that navigation between all windows works properly. (cancel in camera window from continue session seems to be giving an error)
-make camera windows more descriptive either by adding appropriate text/changing presentation of the camera feed to
        suggest what the system requires
===================================input validation====================================
-a method was added to the base class for handling generic validation for required fields



**in the verification process, the qr scanner will always appear by default. A button will be provided for entry with 
    a touch keypad in the qr scanner window

    -find any point that needs to be checked in case of exceptions
    -reconsider all the icons used in the application

===========================blocking student registration number====================
-after 3 tries the system blocks a student from the attendance marking process for that particular event. 
    Is this the optimal approach?

-todos
    -implementation of the on-screen keyboard feature for barcode window
    -implementation of the fingerprint scan feature