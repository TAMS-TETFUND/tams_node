There could be a small web app on the node device for sharing 
logged attendance with lecturers at the end of the attendance-
taking process. 
- Only Staff should be allowed to access this web app
- A staff should only have access to attendance records that they initiated
- If the attendance record model on every node device maintains the same state 
    (i.e. if they're synchronized), then a Staff could fetch her attendance
    records whenever they are in proximity with any of the node device or they
    could get it by connecting to the server. 
- If how much of the attendance records should actually be maintained by the 
    node devices?
- It does not seem useful for a node device to maintain attendance records of
    previous academic sessions. (This data could be retained on the server for 
    a longer period of time).

- what will happen if a user erroneously alters the session settings and causes 
    the system to clear all attendance records that the alteration renders 
    unnecessary? 

** -To allow for some margin, let the node devices retain attendance records
    for EXACTLY TWO ACADEMIC SESSIONS **


================================node device web app==================================
    
    On the node device web app:
    - Staff should be prompted to login
    - staff will find their dashboard with the option of downloading attendance records
        that they initiated.
==============================todos===============================================
    -   add paginator to the attendance records page of the web app
    -   finish implementation of the fingerprint class
    -   add desktop feature that starts up the web app and stops it.


    -   show status of an attendance session (with option of ending it on the web app) or 
        it could be that when a user opts to download attendance logged for an event, you 
        prompt the user to end attendance. and prevent the user from downloading attendance
        records when attendance session is still active.
    -   only attendsnce sessions that have been closed should be downloadable on the webapp


    -   ideally, the casing of staff number should not matter when logging in. Handle issue of
        letter casing affecting authentication.
    -   could implement the printing of ID card on the web app. (is this advisable?)
    -   UI/UX issues on both desktop app and web app.
    -   One of the requirements states that every attendance session should be automatically 
        closed after the start day of the event passes. This has not been implemented.
    -   closed events get reloaded when the application restarts: clear closed eventes from config.ini file 
        and save changes immediately.

    - there should be utilities for easily checking availability of camera and fingerprint scanner.

    -refactor the appconfigparser module, compose the class with the ConfigParser class and override the setitem and getitem
        magic methods of the class
    
    -modify the __setitem__ method of the appconfigparser class to handle conversion of input values to str
    -finish writing unit tests for the app and webapp modules of the project
    -implement logic for app to detect when a verification module is unavailable
    -annotate code/add doc strings where necessary

    - issue has arisen from hardcoded window navigation. Cannot decide where to send user when 
        fingerprint scanner is not working. 
            -there is also a chance that faceverification is unavailable.
    ========================================================================
    Quiz and exam should only allow students that have registered for the course to partake in such events.
    implement failed attempts in fingerprint verification for student verification.
    implement jitter kwarg for face enrolment
    
    fingerprint should be the preferred mode of verification because spoofing is more common with face
    	verification.
    the initiator should be responsible for choosing the mode of verification and should be made aware of the
	risks of using face verification.
    the interface has to be designed in such a way that the system will prefer using fingerprint and use face as 
    	fallback.  
==============================================================================
The device enroller could be the first thing called when the gui application is started.
This will ensure the user is informed that the device needs to be initially setup with the
server to function. There could also be a configuration that could be used if the device is to 
be used as a standalone device.

current implementation of the register_device method of the DeviceEnroller class is tightly coupled 
with the server api view for node device registration. This may need to be revised as the projects goes 
ahead.

**an arbitrary value can also be allowed by the rest api for a node device to inform it to automatically
generate name to be be given to it.

============================================================================================
Attendance sign-out feature........................................................
    -   Only students that signed in can sign out....
    -   The sign-in feature will be permanently unavailable once signing out commences.
    -   The sign-out interface is practically the same as the sign-in interface except for attendance
         type being saved to the attendance record model
    -   is there a need for biometric verification on sign-out events?
=============================================================================================================
should there be an attendance invalidation feature?
===========================================================================================================
Operational modes

    -   The gui application needs to be refactored so that it can be possible to either set the attendance logging
        to a single mode or make it possible for the device to function even when a biometric captuer device (camera or
        fingerprint scanner) is unavailable.
    -   The device could perform system checks to see which devices are currently available on startup.
    -   The GUI should also provide a settings page where a particular mode can be selected.

    The 3 operational modes of the system are:
        - Face verification mode
        - Fingerprint verification mode
        - Bi-modal (where both modes are available)
    
    The user's selection will only be considered when the selected mode is feasible 
    (all necessary devices are connected/functional)

    ==================================
    Face verification Flow:
        - barcode scanner for staff number input
        - attendance initiator face verification 
        - start attenance
        - barcode scanner for student reg number input
        - student face verification

    Fingerprint verification Flow:
        - if camera is unavailable, present keypad for staff id input
        - attendance initiator fingerprint verification 
        - start attenance
        - if camera is unavailable, present keypad for studnet reg number input
        - student fingerprint verification
    
    Bimodal (Default to fingerprint):
        - barcode scanner for staff number input
        - attendance initiator fingerprint verification 
        - start attendance
        - barcode scanner for student reg number input
        - student fingerprint verification

====Default mode should be fingerprint because if proves to be more resilient to spoofing